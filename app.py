import os
import streamlit as st
import pandas as pd
import google.generativeai as genai
from prompt import PROMPT_WORKAW
from prompt2 import PROMPT_PRODUCT
from google.generativeai.types import HarmCategory, HarmBlockThreshold

# -------------------- UI Custom Style --------------------
st.set_page_config(page_title="Workaw AI Chatbot", page_icon="üí¨", layout="wide")
st.markdown("""
    <style>
    body {
        background-color: #f4f4f4;
    }
    .css-1d391kg {
        background-color: #ffffff;
        border-radius: 10px;
        padding: 1rem;
    }
    .css-1kyxreq {
        font-family: 'Segoe UI', sans-serif;
    }
    </style>
""", unsafe_allow_html=True)

# -------------------- Sidebar --------------------
st.sidebar.image("https://cdn-icons-png.flaticon.com/512/4140/4140048.png", width=100)
st.sidebar.title("ü§ñ Workaw Assistant")
def reset_inputs():
    for key in st.session_state.keys():
        del st.session_state[key]


# ‡∏™‡∏£‡πâ‡∏≤‡∏á Sidebar radio ‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏ö event ‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà
if "selected_prompt" not in st.session_state:
    st.session_state.selected_prompt = "üíº ‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô (Workaw)"
selected_prompt = st.sidebar.radio(
    "üîç ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£",
    ("üíº ‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô (Workaw)", "üõçÔ∏è ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤/‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ (Product)"),
    index=("üíº ‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô (Workaw)", "üõçÔ∏è ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤/‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ (Product)").index(st.session_state.selected_prompt),
    key="selected_prompt_radio"
)
# ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á ‡πÅ‡∏•‡∏∞‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏°
if selected_prompt != st.session_state.selected_prompt:
    reset_inputs()
    st.session_state.selected_prompt = selected_prompt
# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö prompt
selected_system_prompt = PROMPT_WORKAW if selected_prompt == "üíº ‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô (Workaw)" else PROMPT_PRODUCT


if st.sidebar.button("üßπ ‡∏•‡πâ‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤"):
    st.session_state["messages"] = [{
        "role": "model",
        "content": "Workaw ‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡πà‡∏∞ ‡∏Ñ‡∏∏‡∏ì‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ ‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∏‡πâ‡∏°‡∏Ñ‡∏£‡∏≠‡∏á‡πÅ‡∏£‡∏á‡∏á‡∏≤‡∏ô ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πÅ‡∏•‡∏∞‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÉ‡∏î‡∏Ñ‡∏∞"
    }]
    st.rerun()

# -------------------- Model Setup --------------------
genai.configure(api_key="AIzaSyCB_vnuDX-qiF9J-mRIGQUOHZsrIIM-YQo")
generation_config = {
    "temperature": 0.1,
    "top_p": 0.95,
    "top_k": 64,
    "max_output_tokens": 1024,
    "response_mime_type": "text/plain",
}

SAFETY_SETTINGS = {
    HarmCategory.HARM_CATEGORY_HARASSMENT: HarmBlockThreshold.BLOCK_NONE,
    HarmCategory.HARM_CATEGORY_HATE_SPEECH: HarmBlockThreshold.BLOCK_NONE,
    HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT: HarmBlockThreshold.BLOCK_NONE,
    HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT: HarmBlockThreshold.BLOCK_NONE
}

model = genai.GenerativeModel(
    model_name="gemini-2.0-flash",
    safety_settings=SAFETY_SETTINGS,
    generation_config=generation_config,
    system_instruction=selected_system_prompt,
)

# -------------------- Title --------------------
st.title("üí¨ Workaw AI Chatbot")
st.caption("‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡∏î‡πâ‡∏≤‡∏ô‡πÅ‡∏£‡∏á‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ üß†")

# -------------------- Load Excel Data --------------------
file1_path = "getgo_data.xlsx"
file2_path = "jorakay_products.xlsx"

def load_file(file_path):
    try:
        df = pd.read_excel(file_path)
        return df.to_string(index=False)
    except Exception as e:
        st.error(f"üö´ Error reading file: {file_path} - {e}")
        return ""

file1_content = load_file(file1_path)
file2_content = load_file(file2_path)
combined_file_content = file1_content + "\n" + file2_content

# -------------------- Initial Chat --------------------
if "messages" not in st.session_state:
    st.session_state["messages"] = [{
        "role": "model",
        "content": "üë©‚Äçüíº ‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡πà‡∏∞ Workaw ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡πÅ‡∏£‡∏á‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ‡∏ñ‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡πà‡∏∞"
    }]

# -------------------- Show Chat History --------------------
for msg in st.session_state["messages"]:
    st.chat_message(msg["role"]).write(msg["content"])

# -------------------- Handle User Input --------------------
if prompt := st.chat_input("‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà..."):
    st.session_state["messages"].append({"role": "user", "content": prompt})
    st.chat_message("user").write(prompt)

    def generate_response():
        history = [
            {"role": msg["role"], "parts": [{"text": msg["content"]}]}
            for msg in st.session_state["messages"]
        ]

        if prompt.lower().startswith("add") or prompt.lower().endswith("add"):
            response_text = "üìå ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Ñ‡πà‡∏∞"
        else:
            history.insert(1, {"role": "user", "parts": [{"text": combined_file_content}]})
            chat_session = model.start_chat(history=history)
            response = chat_session.send_message(prompt)
            response_text = response.text

        st.chat_message("model").write(response_text)
        st.session_state["messages"].append({"role": "model", "content": response_text})

    generate_response()
